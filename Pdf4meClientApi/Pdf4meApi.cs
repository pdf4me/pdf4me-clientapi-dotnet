//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Pdf4me.Client
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class DocumentClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public DocumentClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>GetDocuments</summary>
        /// <returns>GetDocuments Result</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetDocumentRes> GetDocumentsAsync(System.Guid jobId)
        {
            return GetDocumentsAsync(jobId, System.Threading.CancellationToken.None);
        }

        /// <summary>GetDocuments</summary>
        /// <returns>GetDocuments Result</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetDocumentRes> GetDocumentsAsync(System.Guid jobId, System.Threading.CancellationToken cancellationToken)
        {
            if (jobId == null)
                throw new System.ArgumentNullException("jobId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Document/GetDocuments?");
            urlBuilder_.Append("jobId=").Append(System.Uri.EscapeDataString(ConvertToString(jobId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetDocumentRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDocumentRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetDocumentRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>GetDocument</summary>
        /// <returns>GetDocument Result</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetDocumentRes> GetDocumentAsync(GetDocumentReq req)
        {
            return GetDocumentAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>GetDocument</summary>
        /// <returns>GetDocument Result</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetDocumentRes> GetDocumentAsync(GetDocumentReq req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Document/GetDocument");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetDocumentRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetDocumentRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetDocumentRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>DropDocument</summary>
        /// <returns>Contains the JobId, DocumentId and Overview of the droped docs</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DropDocumentRes> DropDocumentAsync(DropDocumentReq req)
        {
            return DropDocumentAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>DropDocument</summary>
        /// <returns>Contains the JobId, DocumentId and Overview of the droped docs</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<DropDocumentRes> DropDocumentAsync(DropDocumentReq req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Document/DropDocument");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(DropDocumentRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DropDocumentRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(DropDocumentRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>ProduceDocuments</summary>
        /// <returns>Contains the JobId, DocumentId and Overview of the droped docs</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ProduceDocumentsRes> ProduceDocumentsAsync(ProduceDocumentsReq req)
        {
            return ProduceDocumentsAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>ProduceDocuments</summary>
        /// <returns>Contains the JobId, DocumentId and Overview of the droped docs</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ProduceDocumentsRes> ProduceDocumentsAsync(ProduceDocumentsReq req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Document/ProduceDocuments");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ProduceDocumentsRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProduceDocumentsRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(ProduceDocumentsRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class JobClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public JobClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>CreateArchiveJobConfig</summary>
        /// <returns>Result contains an exucution JobConfig Id</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ArchiveJobReq> CreateArchiveJobConfigAsync(ArchiveJobReq req)
        {
            return CreateArchiveJobConfigAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>CreateArchiveJobConfig</summary>
        /// <returns>Result contains an exucution JobConfig Id</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ArchiveJobReq> CreateArchiveJobConfigAsync(ArchiveJobReq req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Job/CreateArchiveJobConfig");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ArchiveJobReq);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ArchiveJobReq>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(ArchiveJobReq);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>RunJob</summary>
        /// <returns>Result contains an exucution JobConfig Id</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RunJobRes> RunJobAsync(Job req)
        {
            return RunJobAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>RunJob</summary>
        /// <returns>Result contains an exucution JobConfig Id</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<RunJobRes> RunJobAsync(Job req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Job/RunJob");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(RunJobRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<RunJobRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(RunJobRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>SaveJobConfig</summary>
        /// <returns>Result contains an exucution JobConfig Id</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobConfigRes> SaveJobConfigAsync(JobConfig req)
        {
            return SaveJobConfigAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>SaveJobConfig</summary>
        /// <returns>Result contains an exucution JobConfig Id</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<JobConfigRes> SaveJobConfigAsync(JobConfig req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Job/SaveJobConfig");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(JobConfigRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<JobConfigRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(JobConfigRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>JobConfigs</summary>
        /// <returns>Result contains an exucution JobConfig Id</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JobConfig>> JobConfigsAsync()
        {
            return JobConfigsAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>JobConfigs</summary>
        /// <returns>Result contains an exucution JobConfig Id</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JobConfig>> JobConfigsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Job/JobConfigs");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<JobConfig>);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<JobConfig>>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(System.Collections.ObjectModel.ObservableCollection<JobConfig>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class LightClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public LightClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Optimize</summary>
        /// <param name="profile">max, default, print, web, mrc</param>
        /// <returns>Result contains an optimized PDF document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OptimizeRes> OptimizeAsync(string profile, string contentType, string contentDisposition, object headers, long length, string name, string fileName)
        {
            return OptimizeAsync(profile, contentType, contentDisposition, headers, length, name, fileName, System.Threading.CancellationToken.None);
        }

        /// <summary>Optimize</summary>
        /// <param name="profile">max, default, print, web, mrc</param>
        /// <returns>Result contains an optimized PDF document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OptimizeRes> OptimizeAsync(string profile, string contentType, string contentDisposition, object headers, long length, string name, string fileName, System.Threading.CancellationToken cancellationToken)
        {
            if (length == null)
                throw new System.ArgumentNullException("length");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Light/Optimize?");
            if (profile != null) urlBuilder_.Append("profile=").Append(System.Uri.EscapeDataString(ConvertToString(profile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (contentType != null) urlBuilder_.Append("ContentType=").Append(System.Uri.EscapeDataString(ConvertToString(contentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (contentDisposition != null) urlBuilder_.Append("ContentDisposition=").Append(System.Uri.EscapeDataString(ConvertToString(contentDisposition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (headers != null) urlBuilder_.Append("Headers=").Append(System.Uri.EscapeDataString(ConvertToString(headers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("Length=").Append(System.Uri.EscapeDataString(ConvertToString(length, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (name != null) urlBuilder_.Append("Name=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fileName != null) urlBuilder_.Append("FileName=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OptimizeRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OptimizeRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(OptimizeRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>ConvertToPdf</summary>
        /// <returns>Result contains an optimized PDF document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ConvertToPdfRes> ConvertToPdfAsync(string contentType, string contentDisposition, object headers, long length, string name, string fileName)
        {
            return ConvertToPdfAsync(contentType, contentDisposition, headers, length, name, fileName, System.Threading.CancellationToken.None);
        }

        /// <summary>ConvertToPdf</summary>
        /// <returns>Result contains an optimized PDF document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ConvertToPdfRes> ConvertToPdfAsync(string contentType, string contentDisposition, object headers, long length, string name, string fileName, System.Threading.CancellationToken cancellationToken)
        {
            if (length == null)
                throw new System.ArgumentNullException("length");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Light/ConvertToPdf?");
            if (contentType != null) urlBuilder_.Append("ContentType=").Append(System.Uri.EscapeDataString(ConvertToString(contentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (contentDisposition != null) urlBuilder_.Append("ContentDisposition=").Append(System.Uri.EscapeDataString(ConvertToString(contentDisposition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (headers != null) urlBuilder_.Append("Headers=").Append(System.Uri.EscapeDataString(ConvertToString(headers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("Length=").Append(System.Uri.EscapeDataString(ConvertToString(length, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (name != null) urlBuilder_.Append("Name=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fileName != null) urlBuilder_.Append("FileName=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ConvertToPdfRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ConvertToPdfRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(ConvertToPdfRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Stamp</summary>
        /// <returns>Result contains an optimized PDF document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StampRes> StampAsync(string text, string pages, AlignX alignX, AlignY alignY, string contentType, string contentDisposition, object headers, long length, string name, string fileName)
        {
            return StampAsync(text, pages, alignX, alignY, contentType, contentDisposition, headers, length, name, fileName, System.Threading.CancellationToken.None);
        }

        /// <summary>Stamp</summary>
        /// <returns>Result contains an optimized PDF document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<StampRes> StampAsync(string text, string pages, AlignX alignX, AlignY alignY, string contentType, string contentDisposition, object headers, long length, string name, string fileName, System.Threading.CancellationToken cancellationToken)
        {
            if (alignX == null)
                throw new System.ArgumentNullException("alignX");

            if (alignY == null)
                throw new System.ArgumentNullException("alignY");

            if (length == null)
                throw new System.ArgumentNullException("length");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Light/Stamp?");
            if (text != null) urlBuilder_.Append("text=").Append(System.Uri.EscapeDataString(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (pages != null) urlBuilder_.Append("pages=").Append(System.Uri.EscapeDataString(ConvertToString(pages, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("alignX=").Append(System.Uri.EscapeDataString(ConvertToString(alignX, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("alignY=").Append(System.Uri.EscapeDataString(ConvertToString(alignY, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (contentType != null) urlBuilder_.Append("ContentType=").Append(System.Uri.EscapeDataString(ConvertToString(contentType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (contentDisposition != null) urlBuilder_.Append("ContentDisposition=").Append(System.Uri.EscapeDataString(ConvertToString(contentDisposition, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (headers != null) urlBuilder_.Append("Headers=").Append(System.Uri.EscapeDataString(ConvertToString(headers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("Length=").Append(System.Uri.EscapeDataString(ConvertToString(length, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (name != null) urlBuilder_.Append("Name=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fileName != null) urlBuilder_.Append("FileName=").Append(System.Uri.EscapeDataString(ConvertToString(fileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(StampRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<StampRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(StampRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class ManagementClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ManagementClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Version</summary>
        /// <returns>Version</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<VersionRes> VersionAsync()
        {
            return VersionAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>Version</summary>
        /// <returns>Version</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<VersionRes> VersionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Management/Version");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(VersionRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<VersionRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(VersionRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>CodeSample</summary>
        /// <returns>Code Sample</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CodeSampleRes> CodeSampleAsync(string actionName, string language)
        {
            return CodeSampleAsync(actionName, language, System.Threading.CancellationToken.None);
        }

        /// <summary>CodeSample</summary>
        /// <returns>Code Sample</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CodeSampleRes> CodeSampleAsync(string actionName, string language, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Management/CodeSample?");
            if (actionName != null) urlBuilder_.Append("actionName=").Append(System.Uri.EscapeDataString(ConvertToString(actionName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (language != null) urlBuilder_.Append("language=").Append(System.Uri.EscapeDataString(ConvertToString(language, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(CodeSampleRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CodeSampleRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(CodeSampleRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>CodeSampleActions</summary>
        /// <returns>Code Sample Action list</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CodeSampleRes> CodeSampleActionsAsync()
        {
            return CodeSampleActionsAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>CodeSampleActions</summary>
        /// <returns>Code Sample Action list</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CodeSampleRes> CodeSampleActionsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Management/CodeSampleActions");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(CodeSampleRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CodeSampleRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(CodeSampleRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Profile</summary>
        /// <returns>Profile</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ProfileRes> ProfileAsync()
        {
            return ProfileAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>Profile</summary>
        /// <returns>Profile</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ProfileRes> ProfileAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Management/Profile");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ProfileRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(ProfileRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>SignUp</summary>
        /// <returns>User</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SignUpUserRes> SignUpUserAsync(SignUpUser signUpUser)
        {
            return SignUpUserAsync(signUpUser, System.Threading.CancellationToken.None);
        }

        /// <summary>SignUp</summary>
        /// <returns>User</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SignUpUserRes> SignUpUserAsync(SignUpUser signUpUser, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Management/SignUpUser");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(signUpUser, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(SignUpUserRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SignUpUserRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(SignUpUserRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>UpdatePaymentMethod</summary>
        /// <returns>UpdatePaymentMethod response</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UpdatePaymentMethodRes> UpdatePaymentMethodAsync(UpdatePaymentMethod updatePaymentMethod)
        {
            return UpdatePaymentMethodAsync(updatePaymentMethod, System.Threading.CancellationToken.None);
        }

        /// <summary>UpdatePaymentMethod</summary>
        /// <returns>UpdatePaymentMethod response</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<UpdatePaymentMethodRes> UpdatePaymentMethodAsync(UpdatePaymentMethod updatePaymentMethod, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Management/UpdatePaymentMethod");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updatePaymentMethod, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(UpdatePaymentMethodRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatePaymentMethodRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(UpdatePaymentMethodRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>CreateApiKey</summary>
        /// <returns>CreateApiKey response</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreateApiKeyRes> CreateApiKeyAsync(CreateApiKey createApiKey)
        {
            return CreateApiKeyAsync(createApiKey, System.Threading.CancellationToken.None);
        }

        /// <summary>CreateApiKey</summary>
        /// <returns>CreateApiKey response</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CreateApiKeyRes> CreateApiKeyAsync(CreateApiKey createApiKey, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Management/CreateApiKey");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createApiKey, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(CreateApiKeyRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CreateApiKeyRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(CreateApiKeyRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>ApiUsage</summary>
        /// <returns>ApiUsage to give overview of payment profile and number of api calls.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ApiUsageRes> ApiUsageAsync()
        {
            return ApiUsageAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>ApiUsage</summary>
        /// <returns>ApiUsage to give overview of payment profile and number of api calls.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ApiUsageRes> ApiUsageAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Management/ApiUsage");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty);
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ApiUsageRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ApiUsageRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(ApiUsageRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class OcrClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public OcrClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>ScanMrc</summary>
        /// <returns>ScanMrc</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ScanMrcRes> ScanMrcAsync(ScanMrcReq req)
        {
            return ScanMrcAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>ScanMrc</summary>
        /// <returns>ScanMrc</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ScanMrcRes> ScanMrcAsync(ScanMrcReq req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Ocr/ScanMrc");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ScanMrcRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ScanMrcRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(ScanMrcRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>BusinessCard</summary>
        /// <returns>Recognize BusinessCard</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RecognizeBusinessCardRes> BusinessCardAsync(RecognizeBusinessCard req)
        {
            return BusinessCardAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>BusinessCard</summary>
        /// <returns>Recognize BusinessCard</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<RecognizeBusinessCardRes> BusinessCardAsync(RecognizeBusinessCard req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Ocr/BusinessCard");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(RecognizeBusinessCardRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<RecognizeBusinessCardRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(RecognizeBusinessCardRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Document</summary>
        /// <returns>Recognize any document</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RecognizeDocumentRes> DocumentAsync(RecognizeDocument req)
        {
            return DocumentAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>Document</summary>
        /// <returns>Recognize any document</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<RecognizeDocumentRes> DocumentAsync(RecognizeDocument req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Ocr/Document");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(RecognizeDocumentRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<RecognizeDocumentRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(RecognizeDocumentRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PdfClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PdfClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Stamp</summary>
        /// <returns>Result contains stamped document</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<StampRes> StampAsync(Stamp req)
        {
            return StampAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>Stamp</summary>
        /// <returns>Result contains stamped document</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<StampRes> StampAsync(Stamp req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Pdf/Stamp");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(StampRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<StampRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(StampRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>ExtractResources</summary>
        /// <returns>Result contains a PDF-A compatible document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExtractResourcesRes> ExtractResourcesAsync(ExtractResourcesReq req)
        {
            return ExtractResourcesAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>ExtractResources</summary>
        /// <returns>Result contains a PDF-A compatible document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ExtractResourcesRes> ExtractResourcesAsync(ExtractResourcesReq req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Pdf/ExtractResources");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ExtractResourcesRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractResourcesRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(ExtractResourcesRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>CreatePdfA</summary>
        /// <returns>Result contains a PDF-A compatible document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PdfARes> CreatePdfAAsync(PdfAReq req)
        {
            return CreatePdfAAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>CreatePdfA</summary>
        /// <returns>Result contains a PDF-A compatible document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PdfARes> CreatePdfAAsync(PdfAReq req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Pdf/CreatePdfA");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(PdfARes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PdfARes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(PdfARes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Optimize</summary>
        /// <returns>Result contains an optimized PDF document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OptimizeRes> OptimizeAsync(Optimize req)
        {
            return OptimizeAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>Optimize</summary>
        /// <returns>Result contains an optimized PDF document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OptimizeRes> OptimizeAsync(Optimize req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Pdf/Optimize");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(OptimizeRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OptimizeRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(OptimizeRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>ConvertToPdf</summary>
        /// <returns>Result contains an optimized PDF document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ConvertToPdfRes> ConvertToPdfAsync(ConvertToPdf req)
        {
            return ConvertToPdfAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>ConvertToPdf</summary>
        /// <returns>Result contains an optimized PDF document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ConvertToPdfRes> ConvertToPdfAsync(ConvertToPdf req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Pdf/ConvertToPdf");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ConvertToPdfRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ConvertToPdfRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(ConvertToPdfRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>GetThumbnails</summary>
        /// <returns>Result contains a PDF-A compatible document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetThumbnailsRes> GetThumbnailsAsync(GetThumbnailsReq req)
        {
            return GetThumbnailsAsync(req, System.Threading.CancellationToken.None);
        }

        /// <summary>GetThumbnails</summary>
        /// <returns>Result contains a PDF-A compatible document.</returns>
        /// <exception cref="Pdf4meApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetThumbnailsRes> GetThumbnailsAsync(GetThumbnailsReq req, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("Pdf/GetThumbnails");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(req, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(GetThumbnailsRes);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetThumbnailsRes>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "500")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(Pdf4meException);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new Pdf4meApiException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new Pdf4meApiException<Pdf4meException>("Return Pdf4meException in case of a technical Error.", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new Pdf4meApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }

                        return default(GetThumbnailsRes);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetDocumentListRes
    {
        [Newtonsoft.Json.JsonProperty("documentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DocumentOverview> DocumentList { get; set; }

        [Newtonsoft.Json.JsonProperty("docConverterLogs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DocConverterLog> DocConverterLogs { get; set; }

        [Newtonsoft.Json.JsonProperty("pricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pricing Pricing { get; set; }

        [Newtonsoft.Json.JsonProperty("errorMsg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMsg { get; set; }

        [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Exception { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetDocumentListRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetDocumentListRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocumentOverview
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("docStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentOverviewDocStatus? DocStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("inExecution", Required = Newtonsoft.Json.Required.Always)]
        public bool InExecution { get; set; }

        [Newtonsoft.Json.JsonProperty("ratio", Required = Newtonsoft.Json.Required.Always)]
        public double Ratio { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Thumbnail { get; set; }

        [Newtonsoft.Json.JsonProperty("docMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocMetadata DocMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocumentOverviewDocumentType? DocumentType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DocumentOverview FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentOverview>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocConverterLog
    {
        [Newtonsoft.Json.JsonProperty("messageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MessageType { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("docConverterLogLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocConverterLogLevel? DocConverterLogLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("durationMilliseconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DurationMilliseconds { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DocConverterLog FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocConverterLog>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Pricing
    {
        [Newtonsoft.Json.JsonProperty("currency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Currency { get; set; }

        [Newtonsoft.Json.JsonProperty("totalCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalCost { get; set; }

        [Newtonsoft.Json.JsonProperty("pageCnt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PageCnt { get; set; }

        [Newtonsoft.Json.JsonProperty("documentCnt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DocumentCnt { get; set; }

        [Newtonsoft.Json.JsonProperty("pricingTypeRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PricingTypeRequired? PricingTypeRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("pricingTypeOfUser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PricingTypeOfUser? PricingTypeOfUser { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Pricing FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pricing>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocMetadata
    {
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }

        [Newtonsoft.Json.JsonProperty("pageCount", Required = Newtonsoft.Json.Required.Always)]
        public long PageCount { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Always)]
        public long Size { get; set; }

        [Newtonsoft.Json.JsonProperty("isEncrypted", Required = Newtonsoft.Json.Required.Always)]
        public bool IsEncrypted { get; set; }

        [Newtonsoft.Json.JsonProperty("pdfCompliance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PdfCompliance { get; set; }

        [Newtonsoft.Json.JsonProperty("isSigned", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSigned { get; set; }

        [Newtonsoft.Json.JsonProperty("uploadedMimeType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UploadedMimeType { get; set; }

        [Newtonsoft.Json.JsonProperty("uploadedFileSize", Required = Newtonsoft.Json.Required.Always)]
        public long UploadedFileSize { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DocMetadata FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocMetadata>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Pdf4meException
    {
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Pdf4meException FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meException>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetDocumentRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pdf4meDocument Document { get; set; }

        [Newtonsoft.Json.JsonProperty("docConverterLogs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DocConverterLog> DocConverterLogs { get; set; }

        [Newtonsoft.Json.JsonProperty("pricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pricing Pricing { get; set; }

        [Newtonsoft.Json.JsonProperty("documentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DocumentOverview> DocumentList { get; set; }

        [Newtonsoft.Json.JsonProperty("errorMsg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMsg { get; set; }

        [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Exception { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetDocumentRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetDocumentRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Pdf4meDocument
    {
        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Pdf4meDocumentDocumentType? DocumentType { get; set; }

        [Newtonsoft.Json.JsonProperty("blobRef", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlobRef { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("refDocumentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? RefDocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("refDocAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object RefDocAction { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("ratio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Ratio { get; set; }

        [Newtonsoft.Json.JsonProperty("docStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Pdf4meDocumentDocStatus? DocStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("inExecution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? InExecution { get; set; }

        [Newtonsoft.Json.JsonProperty("order", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Order { get; set; }

        [Newtonsoft.Json.JsonProperty("showDoc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowDoc { get; set; }

        [Newtonsoft.Json.JsonProperty("docData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] DocData { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Thumbnail { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<byte[]> Thumbnails { get; set; }

        [Newtonsoft.Json.JsonProperty("docConverterLogs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DocConverterLog> DocConverterLogs { get; set; }

        [Newtonsoft.Json.JsonProperty("docMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocMetadata DocMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("originalDocMetadata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocMetadata OriginalDocMetadata { get; set; }

        [Newtonsoft.Json.JsonProperty("storageProviderBroker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Pdf4meDocumentStorageProviderBroker? StorageProviderBroker { get; set; }

        [Newtonsoft.Json.JsonProperty("storageProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Pdf4meDocumentStorageProvider? StorageProvider { get; set; }

        [Newtonsoft.Json.JsonProperty("storageAccountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageAccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("storageProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageProviderId { get; set; }

        [Newtonsoft.Json.JsonProperty("storageProviderFolderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StorageProviderFolderId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Pdf4meDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meDocument>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetDocumentReq
    {
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnailsOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ThumbnailsOnly { get; set; }

        [Newtonsoft.Json.JsonProperty("documentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocumentType { get; set; }

        /// <summary>Run the action asynchronously, get notified for any status changes.</summary>
        [Newtonsoft.Json.JsonProperty("getNotified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GetNotified { get; set; }

        [Newtonsoft.Json.JsonProperty("connectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectionId { get; set; }

        [Newtonsoft.Json.JsonProperty("userFingerprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserFingerprint UserFingerprint { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetDocumentReq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetDocumentReq>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UserFingerprint
    {
        [Newtonsoft.Json.JsonProperty("ipAdress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IpAdress { get; set; }

        [Newtonsoft.Json.JsonProperty("browser", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Browser { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UserFingerprint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserFingerprint>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DropDocumentReq
    {
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Document { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudStorageProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DropDocumentReqCloudStorageProvider? CloudStorageProvider { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudStorageFiles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> CloudStorageFiles { get; set; }

        [Newtonsoft.Json.JsonProperty("cloudStorageFilesDesc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CloudStorageFilesDesc { get; set; }

        /// <summary>Run the action asynchronously, get notified for any status changes.</summary>
        [Newtonsoft.Json.JsonProperty("getNotified", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GetNotified { get; set; }

        [Newtonsoft.Json.JsonProperty("connectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectionId { get; set; }

        [Newtonsoft.Json.JsonProperty("userFingerprint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserFingerprint UserFingerprint { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DropDocumentReq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DropDocumentReq>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DropDocumentRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pdf4meDocument Document { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DocumentOverview> DocumentList { get; set; }

        [Newtonsoft.Json.JsonProperty("docConverterLogs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DocConverterLog> DocConverterLogs { get; set; }

        [Newtonsoft.Json.JsonProperty("pricing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pricing Pricing { get; set; }

        [Newtonsoft.Json.JsonProperty("errorMsg", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMsg { get; set; }

        [Newtonsoft.Json.JsonProperty("exception", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Exception { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DropDocumentRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DropDocumentRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProduceDocumentsReq
    {
        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Document> Documents { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProduceDocumentsReq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProduceDocumentsReq>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Document
    {
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("docStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DocStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("pages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Page> Pages { get; set; }

        [Newtonsoft.Json.JsonProperty("docData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] DocData { get; set; }

        [Newtonsoft.Json.JsonProperty("docLogs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<DocLog> DocLogs { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Document FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Document>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Page
    {
        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("pageId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? PageId { get; set; }

        [Newtonsoft.Json.JsonProperty("pageNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PageNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("rotate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rotate { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Thumbnail { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Page FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Page>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class DocLog
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("docConverterLogLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DocLogDocConverterLogLevel? DocConverterLogLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("durationMilliseconds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? DurationMilliseconds { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static DocLog FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocLog>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProduceDocumentsRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProduceDocumentsRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProduceDocumentsRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ArchiveJobReq
    {
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceFolder", Required = Newtonsoft.Json.Required.Always)]
        public StorageFolder SourceFolder { get; set; } = new StorageFolder();

        [Newtonsoft.Json.JsonProperty("filePattern", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilePattern { get; set; }

        [Newtonsoft.Json.JsonProperty("executionTrigger", Required = Newtonsoft.Json.Required.Always)]
        public ExecutionTrigger ExecutionTrigger { get; set; } = new ExecutionTrigger();

        [Newtonsoft.Json.JsonProperty("archiveConfig", Required = Newtonsoft.Json.Required.Always)]
        public ArchiveConfig ArchiveConfig { get; set; } = new ArchiveConfig();

        [Newtonsoft.Json.JsonProperty("targetFolder", Required = Newtonsoft.Json.Required.Always)]
        public StorageFolder TargetFolder { get; set; } = new StorageFolder();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ArchiveJobReq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchiveJobReq>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StorageFolder
    {
        [Newtonsoft.Json.JsonProperty("storageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StorageFolderStorageType? StorageType { get; set; }

        [Newtonsoft.Json.JsonProperty("folderName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FolderName { get; set; }

        [Newtonsoft.Json.JsonProperty("host", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Host { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StorageFolder FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StorageFolder>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExecutionTrigger
    {
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? StartTime { get; set; }

        [Newtonsoft.Json.JsonProperty("cronTrigger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CronTrigger { get; set; }

        [Newtonsoft.Json.JsonProperty("continues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Continues { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExecutionTrigger FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExecutionTrigger>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ArchiveConfig
    {
        [Newtonsoft.Json.JsonProperty("archiveMetadata", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.ObjectModel.ObservableCollection<KeyValuePairOfStringAndString> ArchiveMetadata { get; set; } = new System.Collections.ObjectModel.ObservableCollection<KeyValuePairOfStringAndString>();

        [Newtonsoft.Json.JsonProperty("signatureStamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SignatureStamp SignatureStamp { get; set; }

        [Newtonsoft.Json.JsonProperty("signatureConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object SignatureConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("useTSA", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseTSA { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ArchiveConfig FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchiveConfig>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class KeyValuePairOfStringAndString
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static KeyValuePairOfStringAndString FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeyValuePairOfStringAndString>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SignatureStamp
    {
        [Newtonsoft.Json.JsonProperty("positionX", Required = Newtonsoft.Json.Required.Always)]
        public int PositionX { get; set; }

        [Newtonsoft.Json.JsonProperty("positionY", Required = Newtonsoft.Json.Required.Always)]
        public int PositionY { get; set; }

        [Newtonsoft.Json.JsonProperty("pageStamp", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SignatureStampPageStamp PageStamp { get; set; }

        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Always)]
        public byte[] Image { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SignatureStamp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignatureStamp>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ArchiveJobRes
    {
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("createdSuccessfully", Required = Newtonsoft.Json.Required.Always)]
        public bool CreatedSuccessfully { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ArchiveJobRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchiveJobRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Job
    {
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("jobConfigId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid JobConfigId { get; set; }

        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Document> Documents { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Job FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Job>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RunJobRes
    {
        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documents", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Document> Documents { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RunJobRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RunJobRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JobConfig
    {
        [Newtonsoft.Json.JsonProperty("jobConfigId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid JobConfigId { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Active { get; set; }

        [Newtonsoft.Json.JsonProperty("creationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CreationDate { get; set; }

        [Newtonsoft.Json.JsonProperty("modDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ModDate { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("sourceFolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageFolder SourceFolder { get; set; }

        [Newtonsoft.Json.JsonProperty("executionTrigger", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExecutionTrigger ExecutionTrigger { get; set; }

        [Newtonsoft.Json.JsonProperty("actionFlow", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ActionFlow ActionFlow { get; set; }

        [Newtonsoft.Json.JsonProperty("targetFolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StorageFolder TargetFolder { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static JobConfig FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JobConfig>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ActionFlow
    {
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Pdf4meAction> Actions { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ActionFlow FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActionFlow>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Pdf4meAction
    {
        [Newtonsoft.Json.JsonProperty("actionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ActionId { get; set; }

        [Newtonsoft.Json.JsonProperty("actionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Pdf4meActionActionType? ActionType { get; set; }

        [Newtonsoft.Json.JsonProperty("userAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserAction { get; set; }

        [Newtonsoft.Json.JsonProperty("actionConfig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActionConfig { get; set; }

        [Newtonsoft.Json.JsonProperty("actionProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<KeyValuePairOfStringAndObject> ActionProperties { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Pdf4meAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Pdf4meAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class KeyValuePairOfStringAndObject
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static KeyValuePairOfStringAndObject FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeyValuePairOfStringAndObject>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class JobConfigRes
    {
        [Newtonsoft.Json.JsonProperty("jobConfigId", Required = Newtonsoft.Json.Required.Always)]
        public System.Guid JobConfigId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static JobConfigRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<JobConfigRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OptimizeRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OptimizeRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OptimizeRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConvertToPdfRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConvertToPdfRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConvertToPdfRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StampRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StampRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StampRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class VersionRes
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static VersionRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CodeSampleRes
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("sampleActionNames", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SampleActionNames { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CodeSampleRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CodeSampleRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ProfileRes
    {
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Profile { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentMethod { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("currentNrOfCalls", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CurrentNrOfCalls { get; set; }

        [Newtonsoft.Json.JsonProperty("lastPaymentDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastPaymentDate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ProfileRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProfileRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SignUpUser
    {
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("subjectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("providerIdentityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProviderIdentityId { get; set; }

        [Newtonsoft.Json.JsonProperty("provider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Provider { get; set; }

        [Newtonsoft.Json.JsonProperty("extUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastName { get; set; }

        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FirstName { get; set; }

        [Newtonsoft.Json.JsonProperty("serviceKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceKey { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SignUpUser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignUpUser>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SignUpUserRes
    {
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SignUpUserRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SignUpUserRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdatePaymentMethod
    {
        [Newtonsoft.Json.JsonProperty("paymentProvider", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentProvider { get; set; }

        [Newtonsoft.Json.JsonProperty("stripeToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StripeToken { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("stripCustomerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StripCustomerId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdatePaymentMethod FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatePaymentMethod>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdatePaymentMethodRes
    {
        [Newtonsoft.Json.JsonProperty("updateSuccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateSuccess { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdatePaymentMethodRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatePaymentMethodRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateApiKey
    {
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UserId { get; set; }

        [Newtonsoft.Json.JsonProperty("extUserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtUserId { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("apiClientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiClientId { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CreateApiKey FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateApiKey>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CreateApiKeyRes
    {
        [Newtonsoft.Json.JsonProperty("apiClientId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiClientId { get; set; }

        [Newtonsoft.Json.JsonProperty("apiKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiKey { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CreateApiKeyRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateApiKeyRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ApiUsageRes
    {
        [Newtonsoft.Json.JsonProperty("apiUsage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ApiUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("payedUsage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? PayedUsage { get; set; }

        [Newtonsoft.Json.JsonProperty("lastPayment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastPayment { get; set; }

        [Newtonsoft.Json.JsonProperty("paymentProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PaymentProfile { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ApiUsageRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApiUsageRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ScanMrcReq
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("mrcAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MrcAction MrcAction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ScanMrcReq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScanMrcReq>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MrcAction
    {
        [Newtonsoft.Json.JsonProperty("recognizerParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RecognizerParameters RecognizerParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("converterParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConverterParameters ConverterParameters { get; set; }

        [Newtonsoft.Json.JsonProperty("compressorParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompressorParameters CompressorParameters { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MrcAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MrcAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RecognizerParameters
    {
        [Newtonsoft.Json.JsonProperty("binarizationPriorOcr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BinarizationPriorOcr { get; set; }

        [Newtonsoft.Json.JsonProperty("binarizationThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BinarizationThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("ocrLanguage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OcrLanguage { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RecognizerParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecognizerParameters>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConverterParameters
    {
        [Newtonsoft.Json.JsonProperty("pdfCompliance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConverterParametersPdfCompliance? PdfCompliance { get; set; }

        [Newtonsoft.Json.JsonProperty("ignoreOcr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IgnoreOcr { get; set; }

        [Newtonsoft.Json.JsonProperty("optionalContentGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptionalContentGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("resolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Resolution { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConverterParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConverterParameters>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CompressorParameters
    {
        [Newtonsoft.Json.JsonProperty("binarizationThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BinarizationThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("binaryCompQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BinaryCompQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("binaryCompression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompressorParametersBinaryCompression? BinaryCompression { get; set; }

        [Newtonsoft.Json.JsonProperty("binaryDownsampling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BinaryDownsampling { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CompressorParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompressorParameters>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ScanMrcRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ScanMrcRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScanMrcRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RecognizeBusinessCard
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("bCardOutputType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RecognizeBusinessCardBCardOutputType? BCardOutputType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RecognizeBusinessCard FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecognizeBusinessCard>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RecognizeBusinessCardRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RecognizeBusinessCardRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecognizeBusinessCardRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RecognizeDocument
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("ocrAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OcrAction OcrAction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RecognizeDocument FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecognizeDocument>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OcrAction
    {
        [Newtonsoft.Json.JsonProperty("businesssCardReco", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BusinesssCardReco { get; set; }

        [Newtonsoft.Json.JsonProperty("fullTextSearch", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FullTextSearch { get; set; }

        [Newtonsoft.Json.JsonProperty("outputType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OcrActionOutputType? OutputType { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OcrAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OcrAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RecognizeDocumentRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RecognizeDocumentRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RecognizeDocumentRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Stamp
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("stampAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StampAction StampAction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Stamp FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Stamp>(data);
        }
    }

    /// <summary>Define Stamp to place on Document</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StampAction
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("pageSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PageSequence { get; set; }

        [Newtonsoft.Json.JsonProperty("relativePosX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RelativePosX { get; set; }

        [Newtonsoft.Json.JsonProperty("relativePosY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RelativePosY { get; set; }

        [Newtonsoft.Json.JsonProperty("sizeX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SizeX { get; set; }

        [Newtonsoft.Json.JsonProperty("sizeY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SizeY { get; set; }

        [Newtonsoft.Json.JsonProperty("rotate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rotate { get; set; }

        [Newtonsoft.Json.JsonProperty("autoorientation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Autoorientation { get; set; }

        /// <summary>The opacity of the stamp as a whole. 1.0 for fully opaque, 0.0 for fully transparent.
        /// Default: 1.0
        /// The PDF/A-1 standard does not allow transparency.Therefore, for PDF/A-1 conforming input files you must
        /// not set alpha to a value other than 1.0</summary>
        [Newtonsoft.Json.JsonProperty("alpha", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Alpha { get; set; }

        /// <summary>Modify scale of stamp. Allowed values for ‹scale_set› are:
        /// - relToA4: Scale the stamp relative to the page size. For example, make stamp half as large on a A5 and
        /// twice as large on a A3 page as specified.</summary>
        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StampActionScale? Scale { get; set; }

        [Newtonsoft.Json.JsonProperty("alignX", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StampActionAlignX? AlignX { get; set; }

        [Newtonsoft.Json.JsonProperty("alignY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StampActionAlignY? AlignY { get; set; }

        [Newtonsoft.Json.JsonProperty("stampType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StampActionStampType? StampType { get; set; }

        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Text Text { get; set; }

        [Newtonsoft.Json.JsonProperty("image", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Image Image { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static StampAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StampAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Text
    {
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Format { get; set; }

        /// <summary>The font size in points, e.g. 12. If set to 0, the size is chosen such that text fits stamp size (not allowed if operator is within transformation operator).</summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        [Newtonsoft.Json.JsonProperty("font", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Font { get; set; }

        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Color Color { get; set; }

        [Newtonsoft.Json.JsonProperty("fontEncoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TextFontEncoding? FontEncoding { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TextMode? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("rotate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rotate Rotate { get; set; }

        [Newtonsoft.Json.JsonProperty("translate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Translate Translate { get; set; }

        [Newtonsoft.Json.JsonProperty("transform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transform Transform { get; set; }

        [Newtonsoft.Json.JsonProperty("spanList", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Span> SpanList { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Text FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Text>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Image
    {
        [Newtonsoft.Json.JsonProperty("rectangle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rectangle Rectangle { get; set; }

        [Newtonsoft.Json.JsonProperty("imageData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] ImageData { get; set; }

        [Newtonsoft.Json.JsonProperty("imageType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageType { get; set; }

        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("compression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ImageCompression? Compression { get; set; }

        [Newtonsoft.Json.JsonProperty("rotate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Rotate Rotate { get; set; }

        [Newtonsoft.Json.JsonProperty("translate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Translate Translate { get; set; }

        [Newtonsoft.Json.JsonProperty("transform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Transform Transform { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Image FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Image>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Color
    {
        [Newtonsoft.Json.JsonProperty("red", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Red { get; set; }

        [Newtonsoft.Json.JsonProperty("green", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Green { get; set; }

        [Newtonsoft.Json.JsonProperty("blue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Blue { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Color FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Color>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Rotate
    {
        [Newtonsoft.Json.JsonProperty("angle", Required = Newtonsoft.Json.Required.Always)]
        public double Angle { get; set; }

        [Newtonsoft.Json.JsonProperty("originX", Required = Newtonsoft.Json.Required.Always)]
        public int OriginX { get; set; }

        [Newtonsoft.Json.JsonProperty("originY", Required = Newtonsoft.Json.Required.Always)]
        public int OriginY { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Rotate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Rotate>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Translate
    {
        [Newtonsoft.Json.JsonProperty("offsetX", Required = Newtonsoft.Json.Required.Always)]
        public int OffsetX { get; set; }

        [Newtonsoft.Json.JsonProperty("offsetY", Required = Newtonsoft.Json.Required.Always)]
        public int OffsetY { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Translate FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Translate>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Transform
    {
        [Newtonsoft.Json.JsonProperty("a", Required = Newtonsoft.Json.Required.Always)]
        public int A { get; set; }

        [Newtonsoft.Json.JsonProperty("b", Required = Newtonsoft.Json.Required.Always)]
        public int B { get; set; }

        [Newtonsoft.Json.JsonProperty("c", Required = Newtonsoft.Json.Required.Always)]
        public int C { get; set; }

        [Newtonsoft.Json.JsonProperty("d", Required = Newtonsoft.Json.Required.Always)]
        public int D { get; set; }

        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Always)]
        public int X { get; set; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Always)]
        public int Y { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Transform FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Transform>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Span
    {
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Color Color { get; set; }

        [Newtonsoft.Json.JsonProperty("decoration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpanDecoration? Decoration { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Span FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Span>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Rectangle
    {
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? X { get; set; }

        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Y { get; set; }

        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        [Newtonsoft.Json.JsonProperty("hight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hight { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Rectangle FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Rectangle>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExtractResourcesReq
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("extractResourcesAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExtractResourcesAction ExtractResourcesAction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExtractResourcesReq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractResourcesReq>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExtractResourcesAction
    {
        /// <summary>Get or set whether to extract embedded fonts. Depending on the font type, the extracted font has one of the
        /// following three formats: fnt‹objno›.ttf or fnt‹objno›.pfb or fnt‹objno›.cff, where ‹objno› is the
        /// number of the PDF object of the font.</summary>
        [Newtonsoft.Json.JsonProperty("extractFonts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExtractFonts { get; set; }

        /// <summary>Get or set whether to extract images.Depending on the compression, the extracted image has one of the following
        /// formats: img‹objno›.tif or img‹objno›.jpg, where objno is the number of the PDF object of the image.</summary>
        [Newtonsoft.Json.JsonProperty("extractImages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExtractImages { get; set; }

        /// <summary>List all fonts included in the document and write them as a list to a text file</summary>
        [Newtonsoft.Json.JsonProperty("listFonts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ListFonts { get; set; }

        /// <summary>List all images included in the document and write them as a list to a text file.</summary>
        [Newtonsoft.Json.JsonProperty("listImages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ListImages { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExtractResourcesAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractResourcesAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PdfARes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PdfARes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PdfARes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExtractResourcesRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ExtractResourcesRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtractResourcesRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PdfAReq
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("pdfAAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PdfAAction PdfAAction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PdfAReq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PdfAReq>(data);
        }
    }

    /// <summary>The CreatePdfA accepts files from many different applications and automatically
    /// converts them into PDF/A. The level of conformity can be set to level A, U, or B. ICC color profiles for
    /// device-dependent color profiles and font types are embedded in the document.There is an option to provide
    /// the entire character set for fonts (no subsetting) to facilitate editing at a later stage. Missing fonts
    /// are reproduced as close to the original as possible via font recognition. Metadata can be generated
    /// automatically or added from external sources. The tool also detects and automatically repairs problems
    /// typical of the PDF format.A digital signature can be applied and a conformity check carried out at the
    /// end of the process.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PdfAAction
    {
        /// <summary>By default, fonts that are embedded are automatically subset to minimize the file size.
        /// If for any reason, e.g. postprocessing, fonts shall not be subset, set the property
        /// SubsetFonts to false. Whether fonts are subset or not is irrelevant with respect to
        /// the compliance with PDF/A. (Relevant is only that all used glyphs are contained in the font program.)
        /// Additionals Fonts can be given in this FontsToSubset List</summary>
        [Newtonsoft.Json.JsonProperty("fontsToSubset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PdfFont> FontsToSubset { get; set; }

        /// <summary>Other listed entries (e.g. ePDF10, ePDF11, .. .ePDF17, ePDFUnk) are not supported as output compliance
        /// level.
        /// Some files cannot be converted to the compliance requested. This will be
        /// detected and up- (AllowUpgrade) or downgrade (AllowDowngrade) the compliance automatically.</summary>
        [Newtonsoft.Json.JsonProperty("compliance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PdfAActionCompliance? Compliance { get; set; }

        /// <summary>If set to True, automatic downgrade of the PDF/A conformance level is allowed, e.g. from PDF/A-1a to PDF/A-1b.
        /// If this property is set to True, the level is downgraded under the following conditions:
        /// 
        /// - Downgrade to level B: If a file contains text that is not extractable (i.e.missing ToUnicode information).
        /// Example: Downgrade PDF/A-2u to PDF/A-2b.
        /// - Downgrade to level U (PDF/A-2 and PDF/A-3) or B(PDF/A-1): Level A requires logical structure information and
        /// “tagging” information, so if a file contains no such information, its level is downgraded.
        /// <para>
        ///   Logical structure information in a PDF defines the structure of content, such as titles, paragraphs, figures, reading order, tables or articles.Logical structure elements can be “tagged” with descriptions or alternative text.
        ///   “Tagging” allows the contents of an image to be described to the visually impaired.
        ///   It is not possible for Pdf/A converter to add meaningful tagging information. Adding
        ///   tagging information without prior knowledge about the input file’s structure and content is neither possible nor
        ///   allowed by the PDF/A standard. For that reason, the conformance level is automatically downgraded to level B or U.
        ///   Example: Downgrade PDF/A-1a to PDF/A-1b.
        /// </para><para>
        ///   If set to False and an input file cannot be converted to the requested standard, e.g.because of missing “tagging”
        ///   information, the conversion is aborted and the ErrorCode set to PDF_E_DOWNGRADE.
        /// </para></summary>
        [Newtonsoft.Json.JsonProperty("allowDowngrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowDowngrade { get; set; }

        /// <summary>If set to True, automatic upgrade of the PDF/A version is allowed. If the target standard is PDF/A-1 and a file
        /// contains elements that cannot be converted to PDF/A-1, the target standard is upgraded to PDF/A-2. This avoids
        /// significant visual differences in the output file.
        /// For example, the following elements may lead to an automatic upgrade:
        /// - Transpanrecy
        /// - Optional content groups(OCG, layers)
        /// - Real values that exceed the implementation limit of PDF/A-1
        /// - Embedded OpenType font files
        /// - Predefined CMap encodings in Type0 fonts
        /// 
        /// If set to False, the compliance is not upgraded.Depeding on the value of the ConversionErrorMask the
        /// conversion this will fail with a conversion error PDF_E_CONVERSION</summary>
        [Newtonsoft.Json.JsonProperty("allowUpgrade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowUpgrade { get; set; }

        /// <summary><para>
        ///           Set or get the path to the ICC profile for the output intent.
        ///         </para>
        /// <para>
        ///           The given profile is embedded only if the input file does not contain a PDF/A output intent already
        ///         </para></summary>
        [Newtonsoft.Json.JsonProperty("outputIntentProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PdfAActionOutputIntentProfile? OutputIntentProfile { get; set; }

        /// <summary><para>
        ///           Get or set whether to linearize the PDF output file, i.e. optimize file for fast web access.
        ///           A linearized document has a slightly larger file size than a non-linearized file and provides the following main features:
        ///           - When a document is opened in a PDF viewer of a web browser, the first page can be viewed without downloading the entire
        ///           PDF file.In contrast, a non-linearized PDF file must be downloaded completely before the firstpage can be displayed.
        ///           - When another page is requested by the user, that page is displayed as quickly as possible and incrementally as
        ///           data arrives, without downloading the entire PDF file.
        ///         </para>
        /// <para>
        ///           Signed files cannot be linearizes.So this property must be set to False if
        ///           a digital signature is applied.
        ///         </para></summary>
        [Newtonsoft.Json.JsonProperty("linearize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Linearize { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PdfAAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PdfAAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PdfFont
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("fontContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] FontContent { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static PdfFont FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PdfFont>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Optimize
    {
        [Newtonsoft.Json.JsonProperty("getNotification", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GetNotification { get; set; }

        [Newtonsoft.Json.JsonProperty("connectionId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConnectionId { get; set; }

        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("optimizeAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OptimizeAction OptimizeAction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Optimize FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Optimize>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OptimizeAction
    {
        /// <summary>With this property one of the predefined optimization profiles can be set. If a profile is set then all the properties
        /// listed in TPDFOptimizationProfile(table Profile Settings) are set to their respective values.Properties not
        /// listed in this table are left unchanged.
        /// One way of quickly arriving at a specific setting is to first set the Profile and then adapt the configuration by
        /// setting some of the individual properties.</summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OptimizeActionProfile? Profile { get; set; }

        [Newtonsoft.Json.JsonProperty("useProfile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseProfile { get; set; }

        /// <summary>Get or set whether redundant objects should be removed. If this property is
        /// set to True, duplicate objects are removed in order to reduce the file size.</summary>
        [Newtonsoft.Json.JsonProperty("removeRedundantObjects", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RemoveRedundantObjects { get; set; }

        /// <summary>This property influences two optimizations related to subsetted fonts:
        /// - Subset embedded fonts.
        /// - Merge embedded font programs of different subsets of the same font, granted they can be merged.
        /// Sub-setting refers to removing those glyphs in a font that are not actually
        /// used in any text contained in the PDF.</summary>
        [Newtonsoft.Json.JsonProperty("subsetFonts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SubsetFonts { get; set; }

        /// <summary>Get or set whether resources should be optimized. If set, unused resources
        /// such as images, fonts, and color spaces are removed.Also content streams
        /// are re-built.</summary>
        [Newtonsoft.Json.JsonProperty("optimizeResources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? OptimizeResources { get; set; }

        /// <summary>If this option is set, then re-compression of images is forced if an image in the
        /// input PDF has a compression type that differs from the compression types
        /// given in ContinuousCompressions, BitonalCompressions, or IndexedCompressions. Use this option if you want to allow only the given
        /// compression types for images in the output PDF.</summary>
        [Newtonsoft.Json.JsonProperty("forceCompressionTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForceCompressionTypes { get; set; }

        /// <summary>If set, all images are always recompressed.If not set (default), images are only
        /// recompressed if the resulting image is smaller than the original, i.e.requires
        /// less bytes to store in the file.</summary>
        [Newtonsoft.Json.JsonProperty("forceRecompression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ForceRecompression { get; set; }

        /// <summary>This property is used to enable color complexity reduction of images. (See
        /// also Provided Features for Optimizing Images.)
        /// If enabled then images with device color spaces(DeviceRGB, DeviceCMYK,
        /// or DeviceGray) and indexed images with a device color space as base color
        /// space are analyzed and if possible converted as follows:
        /// - An image with DeviceRGB or DeviceCMYK color space in which all pixels
        /// are gray is converted to a grayscale image with DeviceGray color space.
        /// - An image that contains only black and white pixels is converted into a bitonal image.
        /// - An image in which all the pixels have the same color is down-sampled to one pixel.
        /// Furthermore, images’ masks and soft masks are optimized as follows:
        /// - A soft mask that contains only black and white pixels is converted to a mask.
        /// - A (soft) mask that is opaque is removed.</summary>
        [Newtonsoft.Json.JsonProperty("reduceColorComplexity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ReduceColorComplexity { get; set; }

        /// <summary>Merge embedded font programs. Font programs can be merged, if they
        /// originate from the same font, e.g.they are of the same type, have the same
        /// name and encoding.Merging of Type1(PostScript) and TrueType fonts is supported.</summary>
        [Newtonsoft.Json.JsonProperty("mergeEmbeddedFonts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MergeEmbeddedFonts { get; set; }

        /// <summary>Get or set the compression types for bi-tonal images.
        /// Several values can be combined.The following values are allowed:
        /// ComprAttemptNone
        /// ComprAttemptRaw
        /// ComprAttemptFlate
        /// ComprAttemptLZW
        /// ComprAttemptGroup3
        /// ComprAttemptGroup4
        /// ComprAttemptSource
        /// ComprAttemptJBIG2
        /// Other values are ignored.
        /// During optimization, all set compression types are tried and the one resulting in the least memory footprint is taken.
        /// Typically, CCITT Group 4 or JBIG2 is used for bi-tonal compression. Due to the simpler algorithm CCITT Group 4 has
        /// the advantage of being faster. JBIG2 can achieve compression ratios that are up to twice as high as CCITT Group 4
        /// at the cost of longer computation time.</summary>
        [Newtonsoft.Json.JsonProperty("bitonalCompressions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous> BitonalCompressions { get; set; }

        /// <summary>Get or set the target resolution in dots per inch (DPI) after re-sampling images
        /// for bi-tonal images.See also ResolutionDPI.</summary>
        [Newtonsoft.Json.JsonProperty("bitonalResolutionDPI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BitonalResolutionDPI { get; set; }

        /// <summary>Get or set the threshold resolution in dots per inch (DPI) to selectively activate
        /// re-sampling for bi-tonal images.The value -1 deactivates re-sampling for bitonal images. See also ThresholdDPI.</summary>
        [Newtonsoft.Json.JsonProperty("bitonalThresholdDPI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BitonalThresholdDPI { get; set; }

        /// <summary>Get or set the option to clip images. When enabled, then invisible parts of images are clipped (cropped).
        /// While this does not affect visual parts of images, it may have a minor visual impact because clipped
        /// images are re-compressed. Pre-blended images are not clipped. Enabling this property will also
        /// enable the OptimizeResources property.</summary>
        [Newtonsoft.Json.JsonProperty("clipImages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ClipImages { get; set; }

        /// <summary>Get or set the compression types to be tried for continuous images, i.e. RGB, CMYK, and grayscale images.
        /// See also TPDFComprAttempt. Several values can be combined with bitwise or operators.The following values are allowed:
        /// ComprAttemptNone
        /// ComprAttemptRaw
        /// ComprAttemptJPEG
        /// ComprAttemptFlate
        /// ComprAttemptJPEG2000
        /// ComprAttemptSource
        /// ComprAttemptMRC
        /// Other values are ignored. During optimization, all set compression types are tried and the one resulting in
        /// the least memory footprint is taken.</summary>
        [Newtonsoft.Json.JsonProperty("continuousCompressions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OptimizeActionContinuousCompressions? ContinuousCompressions { get; set; }

        /// <summary>Get or set whether to linearize the PDF output file, i.e. optimize file for fast web access.
        /// A linearized document has a slightly larger file size than a non-linearized file and provides the following main features:
        /// - When a document is opened in a PDF viewer of a web browser, the first page can be viewed without downloading the entire
        /// PDF file.In contrast, a non-linearized PDF file must be downloaded completely before the first page can be displayed.
        /// - When another page is requested by the user, that page is displayed as quickly as possible and incrementally as
        /// data arrives, without downloading the entire PDF file.
        /// Signed files cannot be linearizes. So this property must be set to False if a digital signature is applied.</summary>
        [Newtonsoft.Json.JsonProperty("linearize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Linearize { get; set; }

        /// <summary>Get or set the quality index of lossy compression types. This value ranges
        /// from 1 to 100 and is applied to JPEG and JPEG2000 compression.For
        /// JPEG2000, a quality index of 100 means lossless compression.JPEG compression is always lossy.</summary>
        [Newtonsoft.Json.JsonProperty("imageQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageQuality { get; set; }

        /// <summary>Get or set the compression types for images that have an indexed (“palette”)
        /// color space.See also TPDFComprAttempt.
        /// Several values can be combined with bitwise or operators.The following values are allowed:
        /// - ComprAttemptNone
        /// - ComprAttemptRaw
        /// - ComprAttemptFlate
        /// - ComprAttemptLZW
        /// ComprAttemptSource
        /// Other values are ignored.
        /// During optimization, all set compression types are tried and the one resulting in the least memory footprint is taken.</summary>
        [Newtonsoft.Json.JsonProperty("indexedCompressions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous2> IndexedCompressions { get; set; }

        /// <summary>This option enables or disables dithering when down-sampling bi-tonal images.
        /// The only values supported are eDitherNone and eDitherFloydSteinberg.
        /// Some bi-tonal images try to evoke the impression of different levels of gray
        /// by randomly setting pixels to black.If dithering is applied during downsampling
        /// then the gray levels of such images are preserved better.If dithering is switched
        /// off then lines (e.g.text glyphs) are preserved better.</summary>
        [Newtonsoft.Json.JsonProperty("ditheringMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OptimizeActionDitheringMode? DitheringMode { get; set; }

        /// <summary>Get or set the target resolution in dots per inch (DPI) after re-sampling images
        /// for color images.See also ResolutionDPI.</summary>
        [Newtonsoft.Json.JsonProperty("colorResolutionDPI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ColorResolutionDPI { get; set; }

        /// <summary>Get or set the threshold resolution in dots per inch (DPI) to selectively activate
        /// re-sampling for color images.The value -1 deactivates re-sampling for color
        /// images. See also ThresholdDPI.</summary>
        [Newtonsoft.Json.JsonProperty("colorThresholdDPI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ColorThresholdDPI { get; set; }

        /// <summary>Get or set target resolution in dots per inch (DPI) after re-sampling images
        /// for monochrome images.See also ResolutionDPI.</summary>
        [Newtonsoft.Json.JsonProperty("monochromeResolutionDPI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MonochromeResolutionDPI { get; set; }

        /// <summary>Get or set the threshold resolution in dots per inch (DPI) to selectively activate
        /// re-sampling for monochrome images.The value -1 deactivates re-sampling
        /// for monochrome images. See also ThresholdDPI.</summary>
        [Newtonsoft.Json.JsonProperty("monochromeThresholdDPI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MonochromeThresholdDPI { get; set; }

        /// <summary>Get or set the resolution in DPI (dots per inch) after re-sampling images.
        /// This property affects all three image compression types(BitonalResolutionDPI, ColorResolutionDPI, MonochromeResolutionDPI).
        /// A typical value for the resolution when optimizing for the web is 150 DPI.For
        /// printing typically no re-sampling is applied(see property ThresholdDPI).
        /// Pre-blended images, images with a color key mask, mask, and soft mask images are not re-sampled.
        /// When getting ResolutionDPI, the property returns the target resolution in DPI for color images.</summary>
        [Newtonsoft.Json.JsonProperty("resolutionDPI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ResolutionDPI { get; set; }

        /// <summary>Set the threshold in DPI (dots per inch) to selectively activate re-sampling.
        /// Only images with a resolution above the threshold DPI will be re-sampled.
        /// This property affects all three image compression types(BitonalThresholdDPI, ColorThresholdDPI, MonochromeThresholdDPI). The
        /// value -1 deactivates re-sampling.</summary>
        [Newtonsoft.Json.JsonProperty("thresholdDPI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ThresholdDPI { get; set; }

        /// <summary>Get or set the stripping mode. This mode can be configured to remove unneeded data of a PDF document such as Threads, Metadata, the PieceInfo,
        /// the StructTreeRoot entry, embedded Thumbs and the SpiderInfo entry.Also
        /// this mode is used to indicate whether to flatten form fields, links, and other
        /// annotations.Multiple values of TPDFStripType can be combined with the
        /// bitwise or operator.</summary>
        [Newtonsoft.Json.JsonProperty("strip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous3> Strip { get; set; }

        /// <summary>Set a key-value pair in the document info dictionary. Values of predefined keys are also stored in the XMP metadata.
        /// Popular entries specified in the PDF Reference 1.7 and accepted by most PDF viewers are "Title", "Author",
        /// "Subject", "Creator" (sometimes referred to as Application), and "Producer" (sometimes referred to as
        /// PDF Creator).</summary>
        [Newtonsoft.Json.JsonProperty("infoEntries", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<KeyValuePairOfStringAndString> InfoEntries { get; set; }

        /// <summary>A signature in a PDF consist of two parts:
        /// a.The invisible digital signature in the PDF.
        /// b.The visual appearance that was attributed to the signature.
        /// Part (a) can be used by a viewing application, to verify that a document has not changed since it has been signed
        /// and report this to the user.Part(b) is merely a “decorative” element on the page without further significance.
        /// When optimizing a PDF, the PDF is altered and hence the digital signature is broken.Therefore, all signatures are removed
        /// , including parts(a) and(b).
        /// When the property FlattenSignatureFields is set to True, then digital signatures(parts (a)) are still removed,
        /// but their visual appearances(parts (b)) are flattened.I.e.the latter are retained and drawn as non-editable graphic
        /// onto the page.
        /// <para>
        ///   Note: The resulting PDF can be misleading as it visually appears to be signed,
        ///   but it has no digital signature and hence, a viewer application does not report any
        ///   broken signature.In most cases, such a behavior is undesirable
        /// </para></summary>
        [Newtonsoft.Json.JsonProperty("flattenSignatureFields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FlattenSignatureFields { get; set; }

        [Newtonsoft.Json.JsonProperty("mrcParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MrcParameters MrcParameters { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OptimizeAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OptimizeAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MrcParameters
    {
        /// <summary>Get or set the compression type for MRC foreground and background layers.
        /// See TPDFCompression for possible values.See also Mixed Raster Content
        /// (MRC) Optimization for Images.</summary>
        [Newtonsoft.Json.JsonProperty("mrcLayerCompression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MrcParametersMrcLayerCompression? MrcLayerCompression { get; set; }

        /// <summary>Get or set the image quality for MRC foreground and background layers when
        /// using a lossy compression type.This is a value between 0 and 100.
        /// See also Supported Image Compression Types, Relevant Factors for the File
        /// Size, and Mixed Raster Content(MRC) Optimization for Images.</summary>
        [Newtonsoft.Json.JsonProperty("mrcLayerQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MrcLayerQuality { get; set; }

        /// <summary>Get or set the target resolution in DPI for down-sampling MRC foreground
        /// and background layers.If set to -1 then no down-sampling is performed.
        /// See also Provided Features for Optimizing Images and Mixed Raster Content
        /// (MRC) Optimization for Images.</summary>
        [Newtonsoft.Json.JsonProperty("mrcLayerResolutionDPI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MrcLayerResolutionDPI { get; set; }

        /// <summary>Get or set the compression type for MRC masks.See TPDFCompression
        /// for possible values. See also Mixed Raster Content (MRC) Optimization for
        /// Images.</summary>
        [Newtonsoft.Json.JsonProperty("mrcMaskCompression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MrcParametersMrcMaskCompression? MrcMaskCompression { get; set; }

        /// <summary>Get or set the compression type for MRC cut-out pictures.See TPDFCompression for
        /// possible values.See also Mixed Raster Content (MRC) Optimization for Images.</summary>
        [Newtonsoft.Json.JsonProperty("mrcPictCompression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MrcParametersMrcPictCompression? MrcPictCompression { get; set; }

        /// <summary>Get or set the option to recognize photographic regions when doing MRC.
        /// When set to False then Phase 1: Cutting out Pictures is omitted, i.e., no regions of photographic content are identified.See also Mixed Raster Content
        /// (MRC) Optimization for Images.</summary>
        [Newtonsoft.Json.JsonProperty("mrcRecognizePictures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MrcRecognizePictures { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static MrcParameters FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MrcParameters>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConvertToPdf
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("convertToPdfAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConvertToPdfAction ConvertToPdfAction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConvertToPdf FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConvertToPdf>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConvertToPdfAction
    {
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Options { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConvertToPdfAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConvertToPdfAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetThumbnailsReq
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        [Newtonsoft.Json.JsonProperty("jobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? JobId { get; set; }

        [Newtonsoft.Json.JsonProperty("documentId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DocumentId { get; set; }

        [Newtonsoft.Json.JsonProperty("thumbnailsAction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ThumbnailsAction ThumbnailsAction { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetThumbnailsReq FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetThumbnailsReq>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ThumbnailsAction
    {
        [Newtonsoft.Json.JsonProperty("width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Width { get; set; }

        [Newtonsoft.Json.JsonProperty("hight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hight { get; set; }

        [Newtonsoft.Json.JsonProperty("imageQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ImageQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("dpi", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Dpi { get; set; }

        [Newtonsoft.Json.JsonProperty("pdfCompression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ThumbnailsActionPdfCompression? PdfCompression { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ThumbnailsAction FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ThumbnailsAction>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetThumbnailsRes
    {
        [Newtonsoft.Json.JsonProperty("document", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Document Document { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static GetThumbnailsRes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetThumbnailsRes>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AlignX
    {
        [System.Runtime.Serialization.EnumMember(Value = "left")]
        Left = 0,

        [System.Runtime.Serialization.EnumMember(Value = "center")]
        Center = 1,

        [System.Runtime.Serialization.EnumMember(Value = "right")]
        Right = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AlignY
    {
        [System.Runtime.Serialization.EnumMember(Value = "top")]
        Top = 0,

        [System.Runtime.Serialization.EnumMember(Value = "middle")]
        Middle = 1,

        [System.Runtime.Serialization.EnumMember(Value = "bottom")]
        Bottom = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DocumentOverviewDocStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "undef")]
        Undef = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Finished")]
        Finished = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Uploaded")]
        Uploaded = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Loading")]
        Loading = 4,

        [System.Runtime.Serialization.EnumMember(Value = "Loaded")]
        Loaded = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Converting")]
        Converting = 6,

        [System.Runtime.Serialization.EnumMember(Value = "Converted")]
        Converted = 7,

        [System.Runtime.Serialization.EnumMember(Value = "Optimizing")]
        Optimizing = 8,

        [System.Runtime.Serialization.EnumMember(Value = "Optimized")]
        Optimized = 9,

        [System.Runtime.Serialization.EnumMember(Value = "DoingOcr")]
        DoingOcr = 10,

        [System.Runtime.Serialization.EnumMember(Value = "Ocred")]
        Ocred = 11,

        [System.Runtime.Serialization.EnumMember(Value = "DoingZip")]
        DoingZip = 12,

        [System.Runtime.Serialization.EnumMember(Value = "Stamping")]
        Stamping = 13,

        [System.Runtime.Serialization.EnumMember(Value = "Stamped")]
        Stamped = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DocumentOverviewDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "UploadDoc")]
        UploadDoc = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Converted")]
        Converted = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Stamped")]
        Stamped = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Ocr")]
        Ocr = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Split")]
        Split = 4,

        [System.Runtime.Serialization.EnumMember(Value = "Optimize")]
        Optimize = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Merge")]
        Merge = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DocConverterLogLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "Verbose")]
        Verbose = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Info")]
        Info = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Warning")]
        Warning = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Timing")]
        Timing = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PricingTypeRequired
    {
        [System.Runtime.Serialization.EnumMember(Value = "Free")]
        Free = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Registered")]
        Registered = 1,

        [System.Runtime.Serialization.EnumMember(Value = "PayAsYouGo")]
        PayAsYouGo = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Premium")]
        Premium = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PricingTypeOfUser
    {
        [System.Runtime.Serialization.EnumMember(Value = "Free")]
        Free = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Registered")]
        Registered = 1,

        [System.Runtime.Serialization.EnumMember(Value = "PayAsYouGo")]
        PayAsYouGo = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Premium")]
        Premium = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Pdf4meDocumentDocumentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "UploadDoc")]
        UploadDoc = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Converted")]
        Converted = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Stamped")]
        Stamped = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Ocr")]
        Ocr = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Split")]
        Split = 4,

        [System.Runtime.Serialization.EnumMember(Value = "Optimize")]
        Optimize = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Merge")]
        Merge = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Pdf4meDocumentDocStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "undef")]
        Undef = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Finished")]
        Finished = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Uploaded")]
        Uploaded = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Loading")]
        Loading = 4,

        [System.Runtime.Serialization.EnumMember(Value = "Loaded")]
        Loaded = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Converting")]
        Converting = 6,

        [System.Runtime.Serialization.EnumMember(Value = "Converted")]
        Converted = 7,

        [System.Runtime.Serialization.EnumMember(Value = "Optimizing")]
        Optimizing = 8,

        [System.Runtime.Serialization.EnumMember(Value = "Optimized")]
        Optimized = 9,

        [System.Runtime.Serialization.EnumMember(Value = "DoingOcr")]
        DoingOcr = 10,

        [System.Runtime.Serialization.EnumMember(Value = "Ocred")]
        Ocred = 11,

        [System.Runtime.Serialization.EnumMember(Value = "DoingZip")]
        DoingZip = 12,

        [System.Runtime.Serialization.EnumMember(Value = "Stamping")]
        Stamping = 13,

        [System.Runtime.Serialization.EnumMember(Value = "Stamped")]
        Stamped = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Pdf4meDocumentStorageProviderBroker
    {
        [System.Runtime.Serialization.EnumMember(Value = "undef")]
        Undef = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Kloudless")]
        Kloudless = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Pdf4meDocumentStorageProvider
    {
        [System.Runtime.Serialization.EnumMember(Value = "undef")]
        Undef = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Local")]
        Local = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Url")]
        Url = 2,

        [System.Runtime.Serialization.EnumMember(Value = "OneDrive")]
        OneDrive = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Dropbox")]
        Dropbox = 4,

        [System.Runtime.Serialization.EnumMember(Value = "GoogleDrive")]
        GoogleDrive = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Kloudless")]
        Kloudless = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DropDocumentReqCloudStorageProvider
    {
        [System.Runtime.Serialization.EnumMember(Value = "undef")]
        Undef = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Local")]
        Local = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Url")]
        Url = 2,

        [System.Runtime.Serialization.EnumMember(Value = "OneDrive")]
        OneDrive = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Dropbox")]
        Dropbox = 4,

        [System.Runtime.Serialization.EnumMember(Value = "GoogleDrive")]
        GoogleDrive = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Kloudless")]
        Kloudless = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum DocLogDocConverterLogLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = "Verbose")]
        Verbose = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Info")]
        Info = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Warning")]
        Warning = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Error")]
        Error = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Timing")]
        Timing = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StorageFolderStorageType
    {
        [System.Runtime.Serialization.EnumMember(Value = "undef")]
        Undef = 0,

        [System.Runtime.Serialization.EnumMember(Value = "LocalSystem")]
        LocalSystem = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SignatureStampPageStamp
    {
        [System.Runtime.Serialization.EnumMember(Value = "All")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = "First")]
        First = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Last")]
        Last = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Odd")]
        Odd = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Even")]
        Even = 4,

        [System.Runtime.Serialization.EnumMember(Value = "NotFirst")]
        NotFirst = 5,

        [System.Runtime.Serialization.EnumMember(Value = "NotLast")]
        NotLast = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Pdf4meActionActionType
    {
        [System.Runtime.Serialization.EnumMember(Value = "undef")]
        Undef = 0,

        [System.Runtime.Serialization.EnumMember(Value = "User")]
        User = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Optimize")]
        Optimize = 2,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA")]
        PdfA = 3,

        [System.Runtime.Serialization.EnumMember(Value = "OcrDocument")]
        OcrDocument = 4,

        [System.Runtime.Serialization.EnumMember(Value = "OcrBusCard")]
        OcrBusCard = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ConvertToPdf")]
        ConvertToPdf = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ConverterParametersPdfCompliance
    {
        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf10")]
        Pdf10 = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf11")]
        Pdf11 = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf12")]
        Pdf12 = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf13")]
        Pdf13 = 4,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf14")]
        Pdf14 = 5,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA1b")]
        PdfA1b = 6,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA1a")]
        PdfA1a = 7,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf15")]
        Pdf15 = 8,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf16")]
        Pdf16 = 9,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf17")]
        Pdf17 = 10,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA2b")]
        PdfA2b = 11,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA2u")]
        PdfA2u = 12,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA2a")]
        PdfA2a = 13,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA3b")]
        PdfA3b = 14,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA3u")]
        PdfA3u = 15,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA3a")]
        PdfA3a = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CompressorParametersBinaryCompression
    {
        [System.Runtime.Serialization.EnumMember(Value = "Undef")]
        Undef = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Uncompressed")]
        Uncompressed = 1,

        [System.Runtime.Serialization.EnumMember(Value = "CcittGroup31D")]
        CcittGroup31D = 2,

        [System.Runtime.Serialization.EnumMember(Value = "CcittGroup3")]
        CcittGroup3 = 3,

        [System.Runtime.Serialization.EnumMember(Value = "CcittGroup4")]
        CcittGroup4 = 4,

        [System.Runtime.Serialization.EnumMember(Value = "Lzw")]
        Lzw = 5,

        [System.Runtime.Serialization.EnumMember(Value = "Jpeg")]
        Jpeg = 6,

        [System.Runtime.Serialization.EnumMember(Value = "JpegTn2")]
        JpegTn2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = "AdobeDeflate")]
        AdobeDeflate = 8,

        [System.Runtime.Serialization.EnumMember(Value = "PackBits")]
        PackBits = 9,

        [System.Runtime.Serialization.EnumMember(Value = "Deflate")]
        Deflate = 10,

        [System.Runtime.Serialization.EnumMember(Value = "Jpeg2000")]
        Jpeg2000 = 11,

        [System.Runtime.Serialization.EnumMember(Value = "Jbig2")]
        Jbig2 = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RecognizeBusinessCardBCardOutputType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Vcf")]
        Vcf = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Json")]
        Json = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OcrActionOutputType
    {
        [System.Runtime.Serialization.EnumMember(Value = "undef")]
        Undef = 0,

        [System.Runtime.Serialization.EnumMember(Value = "txt")]
        Txt = 1,

        [System.Runtime.Serialization.EnumMember(Value = "docx")]
        Docx = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Xlsx")]
        Xlsx = 3,

        [System.Runtime.Serialization.EnumMember(Value = "pptx")]
        Pptx = 4,

        [System.Runtime.Serialization.EnumMember(Value = "pdfSearchable")]
        PdfSearchable = 5,

        [System.Runtime.Serialization.EnumMember(Value = "xml")]
        Xml = 6,

        [System.Runtime.Serialization.EnumMember(Value = "rtf")]
        Rtf = 7,

        [System.Runtime.Serialization.EnumMember(Value = "rtt")]
        Rtt = 8,

        [System.Runtime.Serialization.EnumMember(Value = "vcf")]
        Vcf = 9,

        [System.Runtime.Serialization.EnumMember(Value = "json")]
        Json = 10,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StampActionScale
    {
        [System.Runtime.Serialization.EnumMember(Value = "relToA4")]
        RelToA4 = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StampActionAlignX
    {
        [System.Runtime.Serialization.EnumMember(Value = "left")]
        Left = 0,

        [System.Runtime.Serialization.EnumMember(Value = "center")]
        Center = 1,

        [System.Runtime.Serialization.EnumMember(Value = "right")]
        Right = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StampActionAlignY
    {
        [System.Runtime.Serialization.EnumMember(Value = "top")]
        Top = 0,

        [System.Runtime.Serialization.EnumMember(Value = "middle")]
        Middle = 1,

        [System.Runtime.Serialization.EnumMember(Value = "bottom")]
        Bottom = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StampActionStampType
    {
        [System.Runtime.Serialization.EnumMember(Value = "annotation")]
        Annotation = 0,

        [System.Runtime.Serialization.EnumMember(Value = "foreground")]
        Foreground = 1,

        [System.Runtime.Serialization.EnumMember(Value = "background")]
        Background = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TextFontEncoding
    {
        [System.Runtime.Serialization.EnumMember(Value = "Unicode")]
        Unicode = 0,

        [System.Runtime.Serialization.EnumMember(Value = "WinAnsi")]
        WinAnsi = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TextMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "fill")]
        Fill = 0,

        [System.Runtime.Serialization.EnumMember(Value = "stroke")]
        Stroke = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ImageCompression
    {
        [System.Runtime.Serialization.EnumMember(Value = "CCITTFax")]
        CCITTFax = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Flate")]
        Flate = 1,

        [System.Runtime.Serialization.EnumMember(Value = "DCT")]
        DCT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SpanDecoration
    {
        [System.Runtime.Serialization.EnumMember(Value = "underline")]
        Underline = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PdfAActionCompliance
    {
        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf10")]
        Pdf10 = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf11")]
        Pdf11 = 2,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf12")]
        Pdf12 = 3,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf13")]
        Pdf13 = 4,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf14")]
        Pdf14 = 5,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA1b")]
        PdfA1b = 6,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA1a")]
        PdfA1a = 7,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf15")]
        Pdf15 = 8,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf16")]
        Pdf16 = 9,

        [System.Runtime.Serialization.EnumMember(Value = "Pdf17")]
        Pdf17 = 10,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA2b")]
        PdfA2b = 11,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA2u")]
        PdfA2u = 12,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA2a")]
        PdfA2a = 13,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA3b")]
        PdfA3b = 14,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA3u")]
        PdfA3u = 15,

        [System.Runtime.Serialization.EnumMember(Value = "PdfA3a")]
        PdfA3a = 16,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PdfAActionOutputIntentProfile
    {
        [System.Runtime.Serialization.EnumMember(Value = "notSet")]
        NotSet = 0,

        [System.Runtime.Serialization.EnumMember(Value = "sRGBColorSpace")]
        SRGBColorSpace = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OptimizeActionProfile
    {
        [System.Runtime.Serialization.EnumMember(Value = "OptimizationProfileDefault")]
        OptimizationProfileDefault = 0,

        [System.Runtime.Serialization.EnumMember(Value = "OptimizationProfileWeb")]
        OptimizationProfileWeb = 1,

        [System.Runtime.Serialization.EnumMember(Value = "OptimizationProfilePrint")]
        OptimizationProfilePrint = 2,

        [System.Runtime.Serialization.EnumMember(Value = "OptimizationProfileMax")]
        OptimizationProfileMax = 3,

        [System.Runtime.Serialization.EnumMember(Value = "OptimizationProfileMRC")]
        OptimizationProfileMRC = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptNone")]
        ComprAttemptNone = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptRaw")]
        ComprAttemptRaw = 1,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptJPEG")]
        ComprAttemptJPEG = 2,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptFlate")]
        ComprAttemptFlate = 3,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptLZW")]
        ComprAttemptLZW = 4,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptGroup3")]
        ComprAttemptGroup3 = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptGroup3_2D")]
        ComprAttemptGroup3_2D = 6,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptGroup4")]
        ComprAttemptGroup4 = 7,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptJBIG2")]
        ComprAttemptJBIG2 = 8,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptJPEG2000")]
        ComprAttemptJPEG2000 = 9,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptMRC")]
        ComprAttemptMRC = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptSource")]
        ComprAttemptSource = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OptimizeActionContinuousCompressions
    {
        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptNone")]
        ComprAttemptNone = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptRaw")]
        ComprAttemptRaw = 1,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptJPEG")]
        ComprAttemptJPEG = 2,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptFlate")]
        ComprAttemptFlate = 3,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptLZW")]
        ComprAttemptLZW = 4,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptGroup3")]
        ComprAttemptGroup3 = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptGroup3_2D")]
        ComprAttemptGroup3_2D = 6,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptGroup4")]
        ComprAttemptGroup4 = 7,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptJBIG2")]
        ComprAttemptJBIG2 = 8,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptJPEG2000")]
        ComprAttemptJPEG2000 = 9,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptMRC")]
        ComprAttemptMRC = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptSource")]
        ComprAttemptSource = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous2
    {
        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptNone")]
        ComprAttemptNone = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptRaw")]
        ComprAttemptRaw = 1,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptJPEG")]
        ComprAttemptJPEG = 2,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptFlate")]
        ComprAttemptFlate = 3,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptLZW")]
        ComprAttemptLZW = 4,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptGroup3")]
        ComprAttemptGroup3 = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptGroup3_2D")]
        ComprAttemptGroup3_2D = 6,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptGroup4")]
        ComprAttemptGroup4 = 7,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptJBIG2")]
        ComprAttemptJBIG2 = 8,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptJPEG2000")]
        ComprAttemptJPEG2000 = 9,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptMRC")]
        ComprAttemptMRC = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ComprAttemptSource")]
        ComprAttemptSource = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OptimizeActionDitheringMode
    {
        [System.Runtime.Serialization.EnumMember(Value = "DitherNone")]
        DitherNone = 0,

        [System.Runtime.Serialization.EnumMember(Value = "DitherFloydSteinberg")]
        DitherFloydSteinberg = 1,

        [System.Runtime.Serialization.EnumMember(Value = "DitherHalftone")]
        DitherHalftone = 2,

        [System.Runtime.Serialization.EnumMember(Value = "DitherPattern")]
        DitherPattern = 3,

        [System.Runtime.Serialization.EnumMember(Value = "DitherG3Optimized")]
        DitherG3Optimized = 4,

        [System.Runtime.Serialization.EnumMember(Value = "DitherG4Optimized")]
        DitherG4Optimized = 5,

        [System.Runtime.Serialization.EnumMember(Value = "DitherAtkinson")]
        DitherAtkinson = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous3
    {
        [System.Runtime.Serialization.EnumMember(Value = "StripThreads")]
        StripThreads = 0,

        [System.Runtime.Serialization.EnumMember(Value = "StripMetadata")]
        StripMetadata = 1,

        [System.Runtime.Serialization.EnumMember(Value = "StripPieceInfo")]
        StripPieceInfo = 2,

        [System.Runtime.Serialization.EnumMember(Value = "StripStructTree")]
        StripStructTree = 3,

        [System.Runtime.Serialization.EnumMember(Value = "StripThumb")]
        StripThumb = 4,

        [System.Runtime.Serialization.EnumMember(Value = "StripSpider")]
        StripSpider = 5,

        [System.Runtime.Serialization.EnumMember(Value = "StripAlternates")]
        StripAlternates = 6,

        [System.Runtime.Serialization.EnumMember(Value = "StripForms")]
        StripForms = 7,

        [System.Runtime.Serialization.EnumMember(Value = "StripLinks")]
        StripLinks = 8,

        [System.Runtime.Serialization.EnumMember(Value = "StripAnnots")]
        StripAnnots = 9,

        [System.Runtime.Serialization.EnumMember(Value = "StripFormsAnnots")]
        StripFormsAnnots = 10,

        [System.Runtime.Serialization.EnumMember(Value = "StripOutputIntents")]
        StripOutputIntents = 11,

        [System.Runtime.Serialization.EnumMember(Value = "StripAll")]
        StripAll = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MrcParametersMrcLayerCompression
    {
        [System.Runtime.Serialization.EnumMember(Value = "ComprRaw")]
        ComprRaw = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJPEG")]
        ComprJPEG = 1,

        [System.Runtime.Serialization.EnumMember(Value = "ComprFlate")]
        ComprFlate = 2,

        [System.Runtime.Serialization.EnumMember(Value = "ComprLZW")]
        ComprLZW = 3,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup3")]
        ComprGroup3 = 4,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup3_2D")]
        ComprGroup3_2D = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup4")]
        ComprGroup4 = 6,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJBIG2")]
        ComprJBIG2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJPEG2000")]
        ComprJPEG2000 = 8,

        [System.Runtime.Serialization.EnumMember(Value = "ComprTIFFJPEG")]
        ComprTIFFJPEG = 9,

        [System.Runtime.Serialization.EnumMember(Value = "ComprUnknown")]
        ComprUnknown = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ComprDefault")]
        ComprDefault = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MrcParametersMrcMaskCompression
    {
        [System.Runtime.Serialization.EnumMember(Value = "ComprRaw")]
        ComprRaw = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJPEG")]
        ComprJPEG = 1,

        [System.Runtime.Serialization.EnumMember(Value = "ComprFlate")]
        ComprFlate = 2,

        [System.Runtime.Serialization.EnumMember(Value = "ComprLZW")]
        ComprLZW = 3,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup3")]
        ComprGroup3 = 4,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup3_2D")]
        ComprGroup3_2D = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup4")]
        ComprGroup4 = 6,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJBIG2")]
        ComprJBIG2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJPEG2000")]
        ComprJPEG2000 = 8,

        [System.Runtime.Serialization.EnumMember(Value = "ComprTIFFJPEG")]
        ComprTIFFJPEG = 9,

        [System.Runtime.Serialization.EnumMember(Value = "ComprUnknown")]
        ComprUnknown = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ComprDefault")]
        ComprDefault = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum MrcParametersMrcPictCompression
    {
        [System.Runtime.Serialization.EnumMember(Value = "ComprRaw")]
        ComprRaw = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJPEG")]
        ComprJPEG = 1,

        [System.Runtime.Serialization.EnumMember(Value = "ComprFlate")]
        ComprFlate = 2,

        [System.Runtime.Serialization.EnumMember(Value = "ComprLZW")]
        ComprLZW = 3,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup3")]
        ComprGroup3 = 4,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup3_2D")]
        ComprGroup3_2D = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup4")]
        ComprGroup4 = 6,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJBIG2")]
        ComprJBIG2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJPEG2000")]
        ComprJPEG2000 = 8,

        [System.Runtime.Serialization.EnumMember(Value = "ComprTIFFJPEG")]
        ComprTIFFJPEG = 9,

        [System.Runtime.Serialization.EnumMember(Value = "ComprUnknown")]
        ComprUnknown = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ComprDefault")]
        ComprDefault = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.19.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ThumbnailsActionPdfCompression
    {
        [System.Runtime.Serialization.EnumMember(Value = "ComprRaw")]
        ComprRaw = 0,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJPEG")]
        ComprJPEG = 1,

        [System.Runtime.Serialization.EnumMember(Value = "ComprFlate")]
        ComprFlate = 2,

        [System.Runtime.Serialization.EnumMember(Value = "ComprLZW")]
        ComprLZW = 3,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup3")]
        ComprGroup3 = 4,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup3_2D")]
        ComprGroup3_2D = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ComprGroup4")]
        ComprGroup4 = 6,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJBIG2")]
        ComprJBIG2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = "ComprJPEG2000")]
        ComprJPEG2000 = 8,

        [System.Runtime.Serialization.EnumMember(Value = "ComprTIFFJPEG")]
        ComprTIFFJPEG = 9,

        [System.Runtime.Serialization.EnumMember(Value = "ComprUnknown")]
        ComprUnknown = 10,

        [System.Runtime.Serialization.EnumMember(Value = "ComprDefault")]
        ComprDefault = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Pdf4meApiException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public Pdf4meApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.12.16.0 (NJsonSchema v9.10.19.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Pdf4meApiException<TResult> : Pdf4meApiException
    {
        public TResult Result { get; private set; }

        public Pdf4meApiException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}